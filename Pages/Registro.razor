@page "/Registro de Proyectos"
@page "/tarea/{ProyectoId:int}"
@using Models
@using BLL

@inject IToastService Toast

<EditForm Model="tarea" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <section class="form-register">

        <div class="card">
            <div class="card-header">
                <h3>Registro de Proyectos</h3>
            </div>

            <div class="card-body">
                
                    <div class="form-group">
                        <label>ID</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="tarea.ProyectoId" class="form-control" />
                            <ValidationMessage For="(() => tarea.ProyectoId)"></ValidationMessage>
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                            </div>
                        </div>
                    </div>

                    <div class="form-group col-6">
                        <label>Fecha</label>
                        <div class="input-group">
                            <InputDate @bind-Value="tarea.Fecha" class="form-control" />
                            <ValidationMessage For="@(() => tarea.Fecha)" />
                        </div>
                    </div>
            </div>


            <div class="form-group">
                <label>Descripción del Proyecto </label>
                <textarea @bind="tarea.Descripicion" class="form-control" />
                <ValidationMessage For="@(() => tarea.Descripicion)" row="5" placeholder="Descripcion" />
            </div>

            <div class="form-group">
                <label>Detalle de tareas a realizar</label>

                <div class="form-group">
                    <label>Tipo de Tarea</label>
                    <div class="input-group">
                        <select class="form-control col-5" @bind="tarea.TareaId" @onclick="Get">
                            @foreach (var item in listaTareas)
                            {
                                <option value="@item.TareaId">@item.TareaId</option>
                            }
                        </select>
                        <ValidationMessage For="@(() => tarea.TareaId)" />
                    </div>
                </div>

                <div class="form-group">
                    <label>Requerimiento de la tarea</label>
                    <InputText @bind-Value="tarea.DesTarea" class="form-control col-5" />
                    <ValidationMessage For="@(() => tarea.DesTarea)" />
                </div>


                <div class="form-group">
                    <label>Tiempo (minutos)</label>
                    <InputText @bind-Value="tarea.Tempo" class="form-control col-5" />
                    <ValidationMessage For="@(() => tarea.Tiempo)" />
                </div>


                <div class="table-responsive text-nowrap" style="position: relative; overflow: auto; display: block;">
                    <table class="table table-striped">
                        <thead style="background-color: #A9A9A9;">
                            <tr>
                                <th>ID</th>
                                <th>Tipo Tarea</th>
                                <th>Requerimiento</th>
                                <th>Tiempo</th>
                              <th> <button type="button" class="btn btn-info" @onclick="Agregar">Agregar</button> </th>  

                            </tr>
                        </thead>

                        <tbody style="background-color: #FFFFFF;">
                            @foreach (var item in tarea.TareaDetalle)
                            {
                                <tr>
                                    <td>@item.TareaId</td>
                                    <td>@item.DesTarea</td>
                                    <td>@item.Requerimiento</td>
                                    <td>@item.Tiempo</td>
                                    <td><button>type="button" class="btn btn-success">Agregar</button> </td>

                                </tr>
                            }
                        </tbody>
                    </table>

                </div>
            </div>

            <div class="form-group text-center" display: inline-block>
                <div class="btn-group mr-5" role="group" aria-label="First group">
                    <button type="button" class="btn btn-outline-secondary" @onclick="Nuevo">Nuevo</button>
                </div>
                <div class="btn-group mr-5" role="group" aria-label="Second group">
                    <button type="submit" class="btn btn-outline-success"> Guardar</button>
                </div>

                <div class="btn-group" role="group" aria-label="Third group">
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar</button>
                </div>
            </div>
        </div>

    </section>



</EditForm>

@code{

    [Parameter]

    public int ProyectoId { get; set; }

    Tarea tarea = new Tarea();

    Contexto contexto = new Contexto();
    List<Tarea> listaTareas = new List<Tarea>();
    List<TipoTarea> listTipoTareas = new List<TipoTarea>();

    public string DesTarea_ { get; set; }
    public string Requerimiento_ { get; set; }
    public double Tiempo_ { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
        if (ProyectoId > 0)
        {
            var _tarea = TareaBLL.Buscar(ProyectoId);
            if (_tarea != null)
                this.tarea = _tarea;
            else
                toast.ShowWarning("No encontrado.");
        }

        listaTareas = TareaBLL.GetList(p => true);
        listTipoTareas = TipoTareaBLL.GetList(p => true);
    }

    private void Nuevo()
    {

        tarea = new Tarea();

        ///     List<!Tarea> lista = TareaBLL.GetList(c => true);
        //TareaDetList = new List<TareaDetalle>();
        tarea.Fecha = DateTime.Now;
    }

    private void Agregar()
    {

        this.tarea.TareaDetalle.Add(new TareaDetalle
        {
            TareaDetalleId = 0,
            TareaId = 0,
            DesTarea= DesTarea_,
            Requerimiento= Requerimiento_,
            Tiempo = Tiempo_,

        });

    }

    private void Get()
    {
        var descripcion = TipoTareaBLL.Buscar(tarea.TareaId);
        var tipo = TareaBLL.Buscar(tarea.TareaId);
        var requerimiento = TipoTareaBLL.Buscar(tarea.TareaId);
        if (descripcion != null & tipo != null & requerimiento != null)
        {
            ///descripcion = descripcion;
            DesTarea_ = requerimiento.DesTarea;

        }

    }

    private void Guardar()
    {
        bool guardado;

        guardado = TareaBLL.Guardar(tarea);

        if (guardado)
        {
            Nuevo();
            Toast.ShowSuccess("Se ha Guardado Exitosamente");
        }
        else
            Toast.ShowError("Error, no se pudo Guardar");
    }

    private void Buscar()
    {
        if (tarea.ProyectoId > 0)
        {
            var encontrado = TareaBLL.Buscar(tarea.ProyectoId);
            if (encontrado != null)
            {
                tarea = encontrado;
                Toast.ShowSuccess("Se a Encontrado el producto");
            }
            else
                Toast.ShowWarning("No se pudo ecnontrar el producto indicado");
        }
    }

    private void Eliminar()
    {
        bool elimino;

        elimino = TareaBLL.Eliminar(tarea.ProyectoId);

        if (elimino)
        {
            Nuevo();
            Toast.ShowSuccess("Se a Eliminado Exitosamente");
        }
        else
            Toast.ShowError("No se pudo ecnontrar el producto indicado");
    }

}